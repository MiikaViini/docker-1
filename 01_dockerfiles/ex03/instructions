
# 1. Build image: docker build -t gitlab .
# 2. Run image: docker run --rm -it -p 8443:443 -p 8022:22 --name gitlab --privileged gitlab
# 3. Wait until gitLab is configurated
# 4. Set password in https://localhost:8443
# 5. Log in with the same password
# 6. Navigate to projects and create a blank project
# 7. Make project name 'myrepo'
# 8. Check https works: Clone the repo on Mac terminal: git clone https://root:ROOT_PASSWORD_HERE@localhost:8443/root/myrepo.git
# 9. Create a some file, git add, git commit and git push. Should appear now in the gitlab UI files.
# 10. Check SSH works: Create SSH key first: run 'ssh keygen -t ed25519' and answer '/Users/computer/.ssh/newkey' when it asks where to save. It will go to the current folder. No passphrase.
# 11. Go to Gitlab UI root profile SSH keys section: https://localhost:8443/-/profile/keys
# 12. Copy paste the contents of 'newkey.pub' file to the UI. 'cat /Users/computer/.ssh/newkey.pub' to see contents. Click Add key.
# 13. nano '~/.ssh/config' file, as we need to add the new key to be used for connections to localhost gitlab.
# 14. Add this there:
# Host localhost
#     HostName localhost
#     IdentityFile ~/.ssh/newkey
#     User root
#     Port 8022
# 15. Now you can clone 'myrepo' with SSH by running: 'git clone git@localhost:8443:root/privrepo.git'
# 16. Add text file, commit and push. Should be visible in the repository now.
# If getting warned about middle-man, delete host from ~/.ssh/known_hosts and you are good to go.

# Testing HTTPS
# create an empty repository in localhost:8443 & git -c http.sslVerify=false clone.
# Create a file for example, and try git -c http.sslVerify=false push.
# If you try push or clone via https without http.sslVerify=false, there could be issues.

# Testing ssh
# run ssh-keygen -t ed25519 (safer than RSA) and copy it to gitlab
# git clone like

# -- INSTALLATION PACKAGE --
# non-interactive -> used when zero interaction while installing or upgrading the system via apt. It accepts the default answer for all questions. It might mail an error message to the root user. One can use such mode in Dockerfile, shell scripts, cloud-init script, and more.
# wget is basically curl, was in the official gitlab dockerfile
# busybox -> unix utilities like adduser, install,cat, etc.
# tzdata -> basically for timezones
# apt-transport-https -> allows the use of repositories accessed via https. Used only by apt tools and not the user.
# gnupg -> GnuPG allows you to encrypt and sign your data and communications

# -- GITLAB--
# /opt/gitlab/embedded/bin/runsvdir-start:
#	-> https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/4257#note_171862038
# gitlab-ctl reconfigure:
#	-> Reconfiguring GitLab should occur in the event that something in its configuration (/etc/gitlab/gitlab.rb) has changed.

# -- ENTRYPOINT AMPERSAND --
# An ampersand does the same thing as a semicolon or newline in that it indicates the end of a command, but it causes Bash to execute the command asynchronously. That means Bash will run it in the background and run the next command immediately after, without waiting for the former to end.

# https://www.howtoforge.com/tutorial/how-to-install-and-configure-gitlab-on-ubuntu-1804/
